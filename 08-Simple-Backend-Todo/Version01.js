/*
# Todo

## Authentication / User Management:
  - User : {
      userId   : !ID     = REQUIRED, UNIQUE
      token    : !String = REQUIRED, UNIQUE ( generated by the backend on login, register )
      password : !String = REQUIRED
      todos    : ![Todo] = []
    }
  - /register   in:(id,password) out:(token)
  - /login      in:(id,password) out:(token)
  - /logout     in:(token)       out:()
  - /unregister in:(token)       out:()

## Todo-List:
  - Todo = {
      todoId : !ID      =          (Automatic)
      date   : !Date    = Date.now (Automatic)
      status : !Boolean = false
      text   : !String  = ''
    }
  - GET    /todo         in:(token)             out:([Todo])
  - POST   /todo         in:(token,Todo)        out:(Todo)
  - PATCH  /todo/:todoId in:(token,todoId,Todo) out:(Todo)
  - DELETE /todo/:todoId in:(token,todoId)      out:(*[Todo])
*/

const  crypto = require('crypto');
const   level = require('level');
const express = require('express');
const     app = express();
const  userDB = level('users');

// in reality pleas use a salt genrated by crypto.randomBytes
// OR: BETTER! a quantuum random generator
function generateToken ( userId, salt = "c765a454a7sc534as7c5437$" ) {
  return crypto
  .createHash('sha512')                      // << create hash machine
  .update(`${userId}:${Date.now()}:${salt}`) // << input
  .digest("hex");                            // hex = a765f57e65a65fec5765a...
};

function findUserByToken ( token ) {
  return new Promise( ( resolve, reject ) => {
    let foundUser = false;
    const stream = userDB.createValueStream();

    stream.on('data', function ( data ) {
      const user = JSON.parse( data );
      if ( user.token === token ){
        foundUser = true;
        stream.destroy();
        resolve(user);
      }
    });

    stream.on('close', function(){
      if ( ! foundUser ) reject('User not found');
    });
  });
}

app.use( express.json() );

app.post( '/register', async (req,res) => {
  const { id, password } = req.body;
  // check if user id and password were provided
  if ( ! id || ! password )
    return res.status(400).send('Bad Request');
  // if we can actually get a user with this id,
  // it means that the userId is already taken
  try {
    await userDB.get(id);
    return res.status(401).send('Not Authorized');
  } catch ( error ){}
  // create user
  const user = {
    id,
    password,
    token: generateToken(id),
    todos: []
  };
  // save user to db
  await userDB.put( id, JSON.stringify(user) );
  // reply with new token
  res.send({ token: user.token });
});

app.post( '/login', async (req,res)=> {
  let user;
  const { id, password } = req.body;
  // check if user id and password were provided
  if ( ! id || ! password )
    return res.status(400).send('Bad Request');
  
  try {
    // check if user exists in the database
    user = JSON.parse( await userDB.get(id) );
  } catch ( error ){
    // else return a not found error
    return res.status(401).send('Not Authorized');
  }

  if ( user.password !== password ){
    return res.status(401).send('Not Authorized');
  }

  user.token = generateToken(id);
  await userDB.put( id, JSON.stringify(user) );
  res.send({ token: user.token });
});

async function readAuth(req,res) {
  try {
    const token = req.headers.authorization;
    const  user = await findUserByToken(token);
    return user;
  } catch ( error ){
    res.status(401).send('Not Authorized');
    return false;
  }
}

app.post( '/logout', async (req,res)=> {
  const user = await readAuth(req,res);
  if ( !user ) return;
  user.token = false;
  console.log(user)
  await userDB.put( user.id, JSON.stringify(user) );
  res.status(204).send();
});

app.post( '/unregister', async (req,res)=> {
  const user = await readAuth(req,res);
  if ( !user ) return;
  await userDB.del(user.id);
  res.status(204).send();
});

app.get( '/todo/', async (req,res)=> {
  const user = await readAuth(req,res);
  if ( !user ) return;
  res.send(user.todos);
});

app.post( '/todo/', async (req,res)=> {
  const user = await readAuth(req,res);
  if ( !user ) return;
  const { text = "", date = Date.now(), status = false } = req.body;
  const todo = { text, date, status, id: Date.now() };
  user.todos.push( todo );
  await userDB.put( user.id, JSON.stringify(user) );
  res.send(todo);
});

app.patch( '/todo/:todoId', async (req,res)=> {
  const user = await readAuth(req,res);
  if ( !user ) return;

  const todoId = Number( req.params.todoId );
  let     todo = user.todos.find( t => t.id === todoId );

  if ( !todo )
    return res.status(404).send('Not Found!!!!111elf');

  const { text, date, status } = req.body;

  if (   text != undefined ) todo.text   = text;
  if (   date != undefined ) todo.date   = date;
  if ( status != undefined ) todo.status = status;

  await userDB.put( user.id, JSON.stringify(user) );
  res.send(todo);
});

app.delete( '/todo/:todoId', async (req,res)=> {
  const user = await readAuth(req,res);
  if ( !user ) return;

  const todoId = Number( req.params.todoId );
  user.todos = user.todos.filter( t => t.id !== todoId );

  await userDB.put( user.id, JSON.stringify(user) );
  res.status(204).send();
});

app.listen(4444);